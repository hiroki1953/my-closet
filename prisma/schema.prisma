generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  passwordHash            String?
  name                    String?
  role                    UserRole                 @default(USER)
  profile                 Json?
  emailVerified           DateTime?
  image                   String?
  assignedStylistId       String?                  // 担当スタイリストのID
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  accounts                Account[]
  clothingItems           ClothingItem[]
  itemEvaluations         ItemEvaluation[]         @relation("StylistEvaluations")
  sentMessages            Message[]                @relation("UserSentMessages")
  receivedMessages        Message[]                @relation("UserReceivedMessages")
  createdOutfits          Outfit[]                 @relation("StylistCreatedOutfits")
  outfits                 Outfit[]
  purchaseRecommendations PurchaseRecommendation[] @relation("StylistRecommendations")
  receivedRecommendations PurchaseRecommendation[] @relation("UserRecommendations")
  sessions                Session[]
  userProfile             UserProfile?
  // スタイリスト関連
  assignedStylist         User?                    @relation("StylistAssignment", fields: [assignedStylistId], references: [id])
  assignedUsers           User[]                   @relation("StylistAssignment")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ClothingItem {
  id           String               @id @default(cuid())
  userId       String
  imageUrl     String
  category     ClothingCategory
  color        String
  brand        String?
  purchaseDate DateTime?
  status       ClothingStatus       @default(ACTIVE)
  description  String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  evaluations  ItemEvaluation[]
  outfits      OutfitClothingItem[]

  @@map("clothing_items")
}

model Outfit {
  id             String               @id @default(cuid())
  userId         String
  title          String
  stylistComment String?
  tips           String?
  stylingAdvice  String?
  imageUrl       String?
  createdById    String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  clothingItems  OutfitClothingItem[]
  createdBy      User                 @relation("StylistCreatedOutfits", fields: [createdById], references: [id])
  user           User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("outfits")
}

model OutfitClothingItem {
  id             String       @id @default(cuid())
  outfitId       String
  clothingItemId String
  clothingItem   ClothingItem @relation(fields: [clothingItemId], references: [id], onDelete: Cascade)
  outfit         Outfit       @relation(fields: [outfitId], references: [id], onDelete: Cascade)

  @@unique([outfitId, clothingItemId])
  @@map("outfit_clothing_items")
}

model Message {
  id         String     @id @default(cuid())
  fromUserId String
  toUserId   String
  senderType SenderType
  content    String
  readAt     DateTime?
  createdAt  DateTime   @default(now())
  fromUser   User       @relation("UserSentMessages", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser     User       @relation("UserReceivedMessages", fields: [toUserId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model ItemEvaluation {
  id         String         @id @default(cuid())
  itemId     String
  stylistId  String
  evaluation EvaluationType
  comment    String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  item       ClothingItem   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  stylist    User           @relation("StylistEvaluations", fields: [stylistId], references: [id])

  @@unique([itemId, stylistId])
  @@map("item_evaluations")
}

model PurchaseRecommendation {
  id            String           @id @default(cuid())
  userId        String
  stylistId     String
  itemType      String
  description   String
  reason        String?
  productUrl    String?
  priority      PurchasePriority @default(MEDIUM)
  status        PurchaseStatus   @default(PENDING)
  declineReason String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  stylist       User             @relation("StylistRecommendations", fields: [stylistId], references: [id])
  user          User             @relation("UserRecommendations", fields: [userId], references: [id], onDelete: Cascade)

  @@map("purchase_recommendations")
}

model UserProfile {
  id              String             @id @default(cuid())
  userId          String             @unique
  height          Int?
  weight          Int?
  age             Int?
  bodyType        BodyType?
  personalColor   PersonalColorType?
  profileImageUrl String?
  stylePreference String?
  concerns        String?
  goals           String?
  budget          String?
  lifestyle       String?
  isPublic        Boolean            @default(false)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

enum UserRole {
  USER
  STYLIST
}

enum ClothingCategory {
  TOPS
  BOTTOMS
  SHOES
  ACCESSORIES
  OUTERWEAR
}

enum ClothingStatus {
  ACTIVE
  INACTIVE
  DISPOSED
  ROOMWEAR
}

enum EvaluationType {
  NECESSARY
  UNNECESSARY
  KEEP
}

enum SenderType {
  USER
  STYLIST
}

enum PurchasePriority {
  HIGH
  MEDIUM
  LOW
}

enum PurchaseStatus {
  PENDING
  VIEWED
  PURCHASED
  DECLINED
}

enum BodyType {
  STRAIGHT
  WAVE
  NATURAL
  UNKNOWN
}

enum PersonalColorType {
  SPRING
  SUMMER
  AUTUMN
  WINTER
  UNKNOWN
}
